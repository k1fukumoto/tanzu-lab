import os
import string
import random

def random_string(length):
    return ''.join(random.choice(string.ascii_lowercase + string.digits) for m in xrange(length))

env=Environment()

env['ENV']['PATH'] = ':'.join([env['ENV']['PATH'],
                              '/sbin','/usr/local/go/bin'])
env['ENV']['HOME'] = os.environ['HOME']
env['ENV']['KUBECONFIG']=os.environ['KUBECONFIG']

workload=os.environ.get('WORKLOAD_CLUSTER','w-{}'.format(random_string(6)))

outdir='./out/{}'.format(workload)
manifest='{}/cluster.yaml'.format(outdir)
cfg='{}/kubeconfig'.format(outdir)

def create_cluster():
    cmd = ' && '.join(map(lambda y: 'kubectl apply -f ./out/{}/{}'.format(workload,y),
                          ['cluster.yaml','controlplane.yaml','machinedeployment.yaml']))
    cmd += ' && ../wait_for_machines.sh {}'.format(workload)

    c = env.Command(manifest,[],'../generate_manifests.sh {}'.format(workload))
    c = env.Command(cfg,manifest,cmd)
    env.Alias('workload-cluster',cfg)

create_cluster()
Default('workload-cluster')
